Terminals which are not used

   PLUS
   MINUS


Grammar

    0 $accept: prog $end

    1 prog: PROGRAM ident SEMICOLON block END_PROGRAM

    2 block: dec SEMICOLON dec_loop BEGIN_PROGRAM stat_loop

    3 dec_loop: dec SEMICOLON dec_loop
    4         | /* empty */

    5 dec: ident ident_loop COLON dec2

    6 ident_loop: COMMA ident ident_loop
    7           | /* empty */

    8 ident: IDENT

    9 dec2: INTEGER
   10     | ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER

   11 stat: EXIT
   12     | CONTINUE
   13     | BREAK
   14     | WRITE var_loop
   15     | READ var_loop
   16     | if_stat
   17     | DO BEGINLOOP stat_loop ENDLOOP WHILE bool_exp
   18     | WHILE bool_exp BEGINLOOP stat_loop ENDLOOP
   19     | var ASSIGN stat2

   20 if_stat: IF bool_exp THEN stat_loop else_loop ENDIF

   21 else_loop: ELSEIF bool_exp stat_loop else_loop
   22          | ELSE stat_loop
   23          | /* empty */

   24 stat2: exp
   25      | bool_exp QUESTION exp COLON exp

   26 bool_exp: rel_and_exp bool_exp2

   27 bool_exp2: OR rel_and_exp bool_exp2
   28          | /* empty */

   29 rel_and_exp: rel_exp rel_and_exp2

   30 rel_and_exp2: AND rel_exp rel_and_exp2
   31             | /* empty */

   32 rel_exp: NOT rel_exp2
   33        | rel_exp2

   34 rel_exp2: exp comp exp
   35         | TRUE
   36         | FALSE
   37         | L_PAREN bool_exp R_PAREN

   38 comp: EQ
   39     | NEQ
   40     | LT
   41     | GT
   42     | LTE
   43     | GTE

   44 exp: m_exp exp2

   45 exp2: exp_op m_exp exp2
   46     | /* empty */

   47 exp_op: ADD
   48       | SUB

   49 m_exp: term m_exp2

   50 m_exp2: mult_op term m_exp2
   51       | /* empty */

   52 mult_op: MULT
   53        | DIV
   54        | MOD

   55 term: SUB term2
   56     | term2

   57 term2: var
   58      | NUMBER
   59      | L_PAREN exp R_PAREN

   60 var: ident
   61    | ident L_BRACKET exp R_BRACKET

   62 stat_loop: stat SEMICOLON stat_loop2

   63 stat_loop2: stat SEMICOLON stat_loop2
   64           | /* empty */

   65 var_loop: var var_loop2

   66 var_loop2: COMMA var var_loop2
   67          | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
BEGIN_PROGRAM (259) 2
END_PROGRAM (260) 1
INTEGER (261) 9 10
ARRAY (262) 10
OF (263) 10
IF (264) 20
THEN (265) 20
ENDIF (266) 20
ELSE (267) 22
ELSEIF (268) 21
WHILE (269) 17 18
DO (270) 17
BEGINLOOP (271) 17 18
ENDLOOP (272) 17 18
BREAK (273) 13
CONTINUE (274) 12
EXIT (275) 11
READ (276) 15
WRITE (277) 14
AND (278) 30
OR (279) 27
NOT (280) 32
TRUE (281) 35
FALSE (282) 36
SUB (283) 48 55
ADD (284) 47
MULT (285) 52
DIV (286) 53
MOD (287) 54
EQ (288) 38
NEQ (289) 39
LT (290) 40
GT (291) 41
LTE (292) 42
GTE (293) 43
PLUS (294)
MINUS (295)
SEMICOLON (296) 1 2 3 62 63
COLON (297) 5 25
COMMA (298) 6 66
QUESTION (299) 25
L_BRACKET (300) 10 61
R_BRACKET (301) 10 61
L_PAREN (302) 37 59
R_PAREN (303) 37 59
ASSIGN (304) 19
NUMBER (305) 10 58
IDENT (306) 8


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
prog (53)
    on left: 1, on right: 0
block (54)
    on left: 2, on right: 1
dec_loop (55)
    on left: 3 4, on right: 2 3
dec (56)
    on left: 5, on right: 2 3
ident_loop (57)
    on left: 6 7, on right: 5 6
ident (58)
    on left: 8, on right: 1 5 6 60 61
dec2 (59)
    on left: 9 10, on right: 5
stat (60)
    on left: 11 12 13 14 15 16 17 18 19, on right: 62 63
if_stat (61)
    on left: 20, on right: 16
else_loop (62)
    on left: 21 22 23, on right: 20 21
stat2 (63)
    on left: 24 25, on right: 19
bool_exp (64)
    on left: 26, on right: 17 18 20 21 25 37
bool_exp2 (65)
    on left: 27 28, on right: 26 27
rel_and_exp (66)
    on left: 29, on right: 26 27
rel_and_exp2 (67)
    on left: 30 31, on right: 29 30
rel_exp (68)
    on left: 32 33, on right: 29 30
rel_exp2 (69)
    on left: 34 35 36 37, on right: 32 33
comp (70)
    on left: 38 39 40 41 42 43, on right: 34
exp (71)
    on left: 44, on right: 24 25 34 59 61
exp2 (72)
    on left: 45 46, on right: 44 45
exp_op (73)
    on left: 47 48, on right: 45
m_exp (74)
    on left: 49, on right: 44 45
m_exp2 (75)
    on left: 50 51, on right: 49 50
mult_op (76)
    on left: 52 53 54, on right: 50
term (77)
    on left: 55 56, on right: 49 50
term2 (78)
    on left: 57 58 59, on right: 55 56
var (79)
    on left: 60 61, on right: 19 57 65 66
stat_loop (80)
    on left: 62, on right: 2 17 18 20 21 22
stat_loop2 (81)
    on left: 63 64, on right: 62 63
var_loop (82)
    on left: 65, on right: 14 15
var_loop2 (83)
    on left: 66 67, on right: 65 66


state 0

    0 $accept: . prog $end

    PROGRAM  shift, and go to state 1

    prog  go to state 2


state 1

    1 prog: PROGRAM . ident SEMICOLON block END_PROGRAM

    IDENT  shift, and go to state 3

    ident  go to state 4


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 5


state 3

    8 ident: IDENT .

    $default  reduce using rule 8 (ident)


state 4

    1 prog: PROGRAM ident . SEMICOLON block END_PROGRAM

    SEMICOLON  shift, and go to state 6


state 5

    0 $accept: prog $end .

    $default  accept


state 6

    1 prog: PROGRAM ident SEMICOLON . block END_PROGRAM

    IDENT  shift, and go to state 3

    block  go to state 7
    dec    go to state 8
    ident  go to state 9


state 7

    1 prog: PROGRAM ident SEMICOLON block . END_PROGRAM

    END_PROGRAM  shift, and go to state 10


state 8

    2 block: dec . SEMICOLON dec_loop BEGIN_PROGRAM stat_loop

    SEMICOLON  shift, and go to state 11


state 9

    5 dec: ident . ident_loop COLON dec2

    COMMA  shift, and go to state 12

    $default  reduce using rule 7 (ident_loop)

    ident_loop  go to state 13


state 10

    1 prog: PROGRAM ident SEMICOLON block END_PROGRAM .

    $default  reduce using rule 1 (prog)


state 11

    2 block: dec SEMICOLON . dec_loop BEGIN_PROGRAM stat_loop

    IDENT  shift, and go to state 3

    $default  reduce using rule 4 (dec_loop)

    dec_loop  go to state 14
    dec       go to state 15
    ident     go to state 9


state 12

    6 ident_loop: COMMA . ident ident_loop

    IDENT  shift, and go to state 3

    ident  go to state 16


state 13

    5 dec: ident ident_loop . COLON dec2

    COLON  shift, and go to state 17


state 14

    2 block: dec SEMICOLON dec_loop . BEGIN_PROGRAM stat_loop

    BEGIN_PROGRAM  shift, and go to state 18


state 15

    3 dec_loop: dec . SEMICOLON dec_loop

    SEMICOLON  shift, and go to state 19


state 16

    6 ident_loop: COMMA ident . ident_loop

    COMMA  shift, and go to state 12

    $default  reduce using rule 7 (ident_loop)

    ident_loop  go to state 20


state 17

    5 dec: ident ident_loop COLON . dec2

    INTEGER  shift, and go to state 21
    ARRAY    shift, and go to state 22

    dec2  go to state 23


state 18

    2 block: dec SEMICOLON dec_loop BEGIN_PROGRAM . stat_loop

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    ident      go to state 32
    stat       go to state 33
    if_stat    go to state 34
    var        go to state 35
    stat_loop  go to state 36


state 19

    3 dec_loop: dec SEMICOLON . dec_loop

    IDENT  shift, and go to state 3

    $default  reduce using rule 4 (dec_loop)

    dec_loop  go to state 37
    dec       go to state 15
    ident     go to state 9


state 20

    6 ident_loop: COMMA ident ident_loop .

    $default  reduce using rule 6 (ident_loop)


state 21

    9 dec2: INTEGER .

    $default  reduce using rule 9 (dec2)


state 22

   10 dec2: ARRAY . L_BRACKET NUMBER R_BRACKET OF INTEGER

    L_BRACKET  shift, and go to state 38


state 23

    5 dec: ident ident_loop COLON dec2 .

    $default  reduce using rule 5 (dec)


state 24

   20 if_stat: IF . bool_exp THEN stat_loop else_loop ENDIF

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    bool_exp     go to state 45
    rel_and_exp  go to state 46
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 49
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 25

   18 stat: WHILE . bool_exp BEGINLOOP stat_loop ENDLOOP

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    bool_exp     go to state 54
    rel_and_exp  go to state 46
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 49
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 26

   17 stat: DO . BEGINLOOP stat_loop ENDLOOP WHILE bool_exp

    BEGINLOOP  shift, and go to state 55


state 27

   13 stat: BREAK .

    $default  reduce using rule 13 (stat)


state 28

   12 stat: CONTINUE .

    $default  reduce using rule 12 (stat)


state 29

   11 stat: EXIT .

    $default  reduce using rule 11 (stat)


state 30

   15 stat: READ . var_loop

    IDENT  shift, and go to state 3

    ident     go to state 32
    var       go to state 56
    var_loop  go to state 57


state 31

   14 stat: WRITE . var_loop

    IDENT  shift, and go to state 3

    ident     go to state 32
    var       go to state 56
    var_loop  go to state 58


state 32

   60 var: ident .
   61    | ident . L_BRACKET exp R_BRACKET

    L_BRACKET  shift, and go to state 59

    $default  reduce using rule 60 (var)


state 33

   62 stat_loop: stat . SEMICOLON stat_loop2

    SEMICOLON  shift, and go to state 60


state 34

   16 stat: if_stat .

    $default  reduce using rule 16 (stat)


state 35

   19 stat: var . ASSIGN stat2

    ASSIGN  shift, and go to state 61


state 36

    2 block: dec SEMICOLON dec_loop BEGIN_PROGRAM stat_loop .

    $default  reduce using rule 2 (block)


state 37

    3 dec_loop: dec SEMICOLON dec_loop .

    $default  reduce using rule 3 (dec_loop)


state 38

   10 dec2: ARRAY L_BRACKET . NUMBER R_BRACKET OF INTEGER

    NUMBER  shift, and go to state 62


state 39

   32 rel_exp: NOT . rel_exp2

    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident     go to state 32
    rel_exp2  go to state 63
    exp       go to state 49
    m_exp     go to state 50
    term      go to state 51
    term2     go to state 52
    var       go to state 53


state 40

   35 rel_exp2: TRUE .

    $default  reduce using rule 35 (rel_exp2)


state 41

   36 rel_exp2: FALSE .

    $default  reduce using rule 36 (rel_exp2)


state 42

   55 term: SUB . term2

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    term2  go to state 65
    var    go to state 53


state 43

   37 rel_exp2: L_PAREN . bool_exp R_PAREN
   59 term2: L_PAREN . exp R_PAREN

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    bool_exp     go to state 66
    rel_and_exp  go to state 46
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 67
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 44

   58 term2: NUMBER .

    $default  reduce using rule 58 (term2)


state 45

   20 if_stat: IF bool_exp . THEN stat_loop else_loop ENDIF

    THEN  shift, and go to state 68


state 46

   26 bool_exp: rel_and_exp . bool_exp2

    OR  shift, and go to state 69

    $default  reduce using rule 28 (bool_exp2)

    bool_exp2  go to state 70


state 47

   29 rel_and_exp: rel_exp . rel_and_exp2

    AND  shift, and go to state 71

    $default  reduce using rule 31 (rel_and_exp2)

    rel_and_exp2  go to state 72


state 48

   33 rel_exp: rel_exp2 .

    $default  reduce using rule 33 (rel_exp)


state 49

   34 rel_exp2: exp . comp exp

    EQ   shift, and go to state 73
    NEQ  shift, and go to state 74
    LT   shift, and go to state 75
    GT   shift, and go to state 76
    LTE  shift, and go to state 77
    GTE  shift, and go to state 78

    comp  go to state 79


state 50

   44 exp: m_exp . exp2

    SUB  shift, and go to state 80
    ADD  shift, and go to state 81

    $default  reduce using rule 46 (exp2)

    exp2    go to state 82
    exp_op  go to state 83


state 51

   49 m_exp: term . m_exp2

    MULT  shift, and go to state 84
    DIV   shift, and go to state 85
    MOD   shift, and go to state 86

    $default  reduce using rule 51 (m_exp2)

    m_exp2   go to state 87
    mult_op  go to state 88


state 52

   56 term: term2 .

    $default  reduce using rule 56 (term)


state 53

   57 term2: var .

    $default  reduce using rule 57 (term2)


state 54

   18 stat: WHILE bool_exp . BEGINLOOP stat_loop ENDLOOP

    BEGINLOOP  shift, and go to state 89


state 55

   17 stat: DO BEGINLOOP . stat_loop ENDLOOP WHILE bool_exp

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    ident      go to state 32
    stat       go to state 33
    if_stat    go to state 34
    var        go to state 35
    stat_loop  go to state 90


state 56

   65 var_loop: var . var_loop2

    COMMA  shift, and go to state 91

    $default  reduce using rule 67 (var_loop2)

    var_loop2  go to state 92


state 57

   15 stat: READ var_loop .

    $default  reduce using rule 15 (stat)


state 58

   14 stat: WRITE var_loop .

    $default  reduce using rule 14 (stat)


state 59

   61 var: ident L_BRACKET . exp R_BRACKET

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    exp    go to state 93
    m_exp  go to state 50
    term   go to state 51
    term2  go to state 52
    var    go to state 53


state 60

   62 stat_loop: stat SEMICOLON . stat_loop2

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    $default  reduce using rule 64 (stat_loop2)

    ident       go to state 32
    stat        go to state 94
    if_stat     go to state 34
    var         go to state 35
    stat_loop2  go to state 95


state 61

   19 stat: var ASSIGN . stat2

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    stat2        go to state 96
    bool_exp     go to state 97
    rel_and_exp  go to state 46
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 98
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 62

   10 dec2: ARRAY L_BRACKET NUMBER . R_BRACKET OF INTEGER

    R_BRACKET  shift, and go to state 99


state 63

   32 rel_exp: NOT rel_exp2 .

    $default  reduce using rule 32 (rel_exp)


state 64

   59 term2: L_PAREN . exp R_PAREN

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    exp    go to state 100
    m_exp  go to state 50
    term   go to state 51
    term2  go to state 52
    var    go to state 53


state 65

   55 term: SUB term2 .

    $default  reduce using rule 55 (term)


state 66

   37 rel_exp2: L_PAREN bool_exp . R_PAREN

    R_PAREN  shift, and go to state 101


state 67

   34 rel_exp2: exp . comp exp
   59 term2: L_PAREN exp . R_PAREN

    EQ       shift, and go to state 73
    NEQ      shift, and go to state 74
    LT       shift, and go to state 75
    GT       shift, and go to state 76
    LTE      shift, and go to state 77
    GTE      shift, and go to state 78
    R_PAREN  shift, and go to state 102

    comp  go to state 79


state 68

   20 if_stat: IF bool_exp THEN . stat_loop else_loop ENDIF

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    ident      go to state 32
    stat       go to state 33
    if_stat    go to state 34
    var        go to state 35
    stat_loop  go to state 103


state 69

   27 bool_exp2: OR . rel_and_exp bool_exp2

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    rel_and_exp  go to state 104
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 49
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 70

   26 bool_exp: rel_and_exp bool_exp2 .

    $default  reduce using rule 26 (bool_exp)


state 71

   30 rel_and_exp2: AND . rel_exp rel_and_exp2

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident     go to state 32
    rel_exp   go to state 105
    rel_exp2  go to state 48
    exp       go to state 49
    m_exp     go to state 50
    term      go to state 51
    term2     go to state 52
    var       go to state 53


state 72

   29 rel_and_exp: rel_exp rel_and_exp2 .

    $default  reduce using rule 29 (rel_and_exp)


state 73

   38 comp: EQ .

    $default  reduce using rule 38 (comp)


state 74

   39 comp: NEQ .

    $default  reduce using rule 39 (comp)


state 75

   40 comp: LT .

    $default  reduce using rule 40 (comp)


state 76

   41 comp: GT .

    $default  reduce using rule 41 (comp)


state 77

   42 comp: LTE .

    $default  reduce using rule 42 (comp)


state 78

   43 comp: GTE .

    $default  reduce using rule 43 (comp)


state 79

   34 rel_exp2: exp comp . exp

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    exp    go to state 106
    m_exp  go to state 50
    term   go to state 51
    term2  go to state 52
    var    go to state 53


state 80

   48 exp_op: SUB .

    $default  reduce using rule 48 (exp_op)


state 81

   47 exp_op: ADD .

    $default  reduce using rule 47 (exp_op)


state 82

   44 exp: m_exp exp2 .

    $default  reduce using rule 44 (exp)


state 83

   45 exp2: exp_op . m_exp exp2

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    m_exp  go to state 107
    term   go to state 51
    term2  go to state 52
    var    go to state 53


state 84

   52 mult_op: MULT .

    $default  reduce using rule 52 (mult_op)


state 85

   53 mult_op: DIV .

    $default  reduce using rule 53 (mult_op)


state 86

   54 mult_op: MOD .

    $default  reduce using rule 54 (mult_op)


state 87

   49 m_exp: term m_exp2 .

    $default  reduce using rule 49 (m_exp)


state 88

   50 m_exp2: mult_op . term m_exp2

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    term   go to state 108
    term2  go to state 52
    var    go to state 53


state 89

   18 stat: WHILE bool_exp BEGINLOOP . stat_loop ENDLOOP

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    ident      go to state 32
    stat       go to state 33
    if_stat    go to state 34
    var        go to state 35
    stat_loop  go to state 109


state 90

   17 stat: DO BEGINLOOP stat_loop . ENDLOOP WHILE bool_exp

    ENDLOOP  shift, and go to state 110


state 91

   66 var_loop2: COMMA . var var_loop2

    IDENT  shift, and go to state 3

    ident  go to state 32
    var    go to state 111


state 92

   65 var_loop: var var_loop2 .

    $default  reduce using rule 65 (var_loop)


state 93

   61 var: ident L_BRACKET exp . R_BRACKET

    R_BRACKET  shift, and go to state 112


state 94

   63 stat_loop2: stat . SEMICOLON stat_loop2

    SEMICOLON  shift, and go to state 113


state 95

   62 stat_loop: stat SEMICOLON stat_loop2 .

    $default  reduce using rule 62 (stat_loop)


state 96

   19 stat: var ASSIGN stat2 .

    $default  reduce using rule 19 (stat)


state 97

   25 stat2: bool_exp . QUESTION exp COLON exp

    QUESTION  shift, and go to state 114


state 98

   24 stat2: exp .
   34 rel_exp2: exp . comp exp

    EQ   shift, and go to state 73
    NEQ  shift, and go to state 74
    LT   shift, and go to state 75
    GT   shift, and go to state 76
    LTE  shift, and go to state 77
    GTE  shift, and go to state 78

    $default  reduce using rule 24 (stat2)

    comp  go to state 79


state 99

   10 dec2: ARRAY L_BRACKET NUMBER R_BRACKET . OF INTEGER

    OF  shift, and go to state 115


state 100

   59 term2: L_PAREN exp . R_PAREN

    R_PAREN  shift, and go to state 102


state 101

   37 rel_exp2: L_PAREN bool_exp R_PAREN .

    $default  reduce using rule 37 (rel_exp2)


state 102

   59 term2: L_PAREN exp R_PAREN .

    $default  reduce using rule 59 (term2)


state 103

   20 if_stat: IF bool_exp THEN stat_loop . else_loop ENDIF

    ELSE    shift, and go to state 116
    ELSEIF  shift, and go to state 117

    $default  reduce using rule 23 (else_loop)

    else_loop  go to state 118


state 104

   27 bool_exp2: OR rel_and_exp . bool_exp2

    OR  shift, and go to state 69

    $default  reduce using rule 28 (bool_exp2)

    bool_exp2  go to state 119


state 105

   30 rel_and_exp2: AND rel_exp . rel_and_exp2

    AND  shift, and go to state 71

    $default  reduce using rule 31 (rel_and_exp2)

    rel_and_exp2  go to state 120


state 106

   34 rel_exp2: exp comp exp .

    $default  reduce using rule 34 (rel_exp2)


state 107

   45 exp2: exp_op m_exp . exp2

    SUB  shift, and go to state 80
    ADD  shift, and go to state 81

    $default  reduce using rule 46 (exp2)

    exp2    go to state 121
    exp_op  go to state 83


state 108

   50 m_exp2: mult_op term . m_exp2

    MULT  shift, and go to state 84
    DIV   shift, and go to state 85
    MOD   shift, and go to state 86

    $default  reduce using rule 51 (m_exp2)

    m_exp2   go to state 122
    mult_op  go to state 88


state 109

   18 stat: WHILE bool_exp BEGINLOOP stat_loop . ENDLOOP

    ENDLOOP  shift, and go to state 123


state 110

   17 stat: DO BEGINLOOP stat_loop ENDLOOP . WHILE bool_exp

    WHILE  shift, and go to state 124


state 111

   66 var_loop2: COMMA var . var_loop2

    COMMA  shift, and go to state 91

    $default  reduce using rule 67 (var_loop2)

    var_loop2  go to state 125


state 112

   61 var: ident L_BRACKET exp R_BRACKET .

    $default  reduce using rule 61 (var)


state 113

   63 stat_loop2: stat SEMICOLON . stat_loop2

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    $default  reduce using rule 64 (stat_loop2)

    ident       go to state 32
    stat        go to state 94
    if_stat     go to state 34
    var         go to state 35
    stat_loop2  go to state 126


state 114

   25 stat2: bool_exp QUESTION . exp COLON exp

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    exp    go to state 127
    m_exp  go to state 50
    term   go to state 51
    term2  go to state 52
    var    go to state 53


state 115

   10 dec2: ARRAY L_BRACKET NUMBER R_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 128


state 116

   22 else_loop: ELSE . stat_loop

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    ident      go to state 32
    stat       go to state 33
    if_stat    go to state 34
    var        go to state 35
    stat_loop  go to state 129


state 117

   21 else_loop: ELSEIF . bool_exp stat_loop else_loop

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    bool_exp     go to state 130
    rel_and_exp  go to state 46
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 49
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 118

   20 if_stat: IF bool_exp THEN stat_loop else_loop . ENDIF

    ENDIF  shift, and go to state 131


state 119

   27 bool_exp2: OR rel_and_exp bool_exp2 .

    $default  reduce using rule 27 (bool_exp2)


state 120

   30 rel_and_exp2: AND rel_exp rel_and_exp2 .

    $default  reduce using rule 30 (rel_and_exp2)


state 121

   45 exp2: exp_op m_exp exp2 .

    $default  reduce using rule 45 (exp2)


state 122

   50 m_exp2: mult_op term m_exp2 .

    $default  reduce using rule 50 (m_exp2)


state 123

   18 stat: WHILE bool_exp BEGINLOOP stat_loop ENDLOOP .

    $default  reduce using rule 18 (stat)


state 124

   17 stat: DO BEGINLOOP stat_loop ENDLOOP WHILE . bool_exp

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 43
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident        go to state 32
    bool_exp     go to state 132
    rel_and_exp  go to state 46
    rel_exp      go to state 47
    rel_exp2     go to state 48
    exp          go to state 49
    m_exp        go to state 50
    term         go to state 51
    term2        go to state 52
    var          go to state 53


state 125

   66 var_loop2: COMMA var var_loop2 .

    $default  reduce using rule 66 (var_loop2)


state 126

   63 stat_loop2: stat SEMICOLON stat_loop2 .

    $default  reduce using rule 63 (stat_loop2)


state 127

   25 stat2: bool_exp QUESTION exp . COLON exp

    COLON  shift, and go to state 133


state 128

   10 dec2: ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER .

    $default  reduce using rule 10 (dec2)


state 129

   22 else_loop: ELSE stat_loop .

    $default  reduce using rule 22 (else_loop)


state 130

   21 else_loop: ELSEIF bool_exp . stat_loop else_loop

    IF        shift, and go to state 24
    WHILE     shift, and go to state 25
    DO        shift, and go to state 26
    BREAK     shift, and go to state 27
    CONTINUE  shift, and go to state 28
    EXIT      shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    IDENT     shift, and go to state 3

    ident      go to state 32
    stat       go to state 33
    if_stat    go to state 34
    var        go to state 35
    stat_loop  go to state 134


state 131

   20 if_stat: IF bool_exp THEN stat_loop else_loop ENDIF .

    $default  reduce using rule 20 (if_stat)


state 132

   17 stat: DO BEGINLOOP stat_loop ENDLOOP WHILE bool_exp .

    $default  reduce using rule 17 (stat)


state 133

   25 stat2: bool_exp QUESTION exp COLON . exp

    SUB      shift, and go to state 42
    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 44
    IDENT    shift, and go to state 3

    ident  go to state 32
    exp    go to state 135
    m_exp  go to state 50
    term   go to state 51
    term2  go to state 52
    var    go to state 53


state 134

   21 else_loop: ELSEIF bool_exp stat_loop . else_loop

    ELSE    shift, and go to state 116
    ELSEIF  shift, and go to state 117

    $default  reduce using rule 23 (else_loop)

    else_loop  go to state 136


state 135

   25 stat2: bool_exp QUESTION exp COLON exp .

    $default  reduce using rule 25 (stat2)


state 136

   21 else_loop: ELSEIF bool_exp stat_loop else_loop .

    $default  reduce using rule 21 (else_loop)
